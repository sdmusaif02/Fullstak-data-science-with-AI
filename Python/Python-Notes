Introduction of Python:

  - Python is a high level and easy to learn programing language that is widely used in data science.
  - python have easy to write and read syntax.
  - Python have large no of libraries strong communication supports.

* Why Python for data science :
  - In data science Python is used to collect, clean, analyze, visulaize data and it help to predict data.
  - Python used to some some libraries like.
  1. Pandas
  2. Numpy
  3. Matplotib
  4. Scikit-learn
 
vaiables and Data type :

* variables
  
  - Data /type can be stored in temporary storage space caleed variables.
  Ex :-

        Student = " Adnan "
        print(student)
 output :-
        Adnan

* Data types :-
  - Every variable is associated with a data type.

  1. int        - 10 , 20
  2. float      - 3.14 , 2.4
  3. Boolean    - true , False 
  4. String     - " srtmun "
  5. Complex    - 5+3j
                  5 = is real part
                  3 = is imaginary part


* Operators and string functions :-

1. Arithmetic Operators 

   Used for mathematical operations:
   Operator	Meaning	Example

   operator    Description       Example
      +	       Addition           a + b
      -   	   Subtraction       	a - b
      *    	   Multiplication    	a * b
      /    	   Division          	a / b


2. Relational operators :-

   Operators Used to compare two values:

  Operator   	Description        	Example

  ==         	Equal to          	a == b
  !=	        Not equal	          a != b
  >	          Greater than	      a > b
  <          	Less than        


3. Logical Operators :-

   Used to combine conditional statements:

 Operator	                  Description	                                  Example

 and	                      Returns True if both are true                	a > 5 and b < 10
 or                       	Returns True if at least one is true        	a > 5 or b < 3
 not	                      Reverses the result                         	not(a > 5)	a < b



* Python String Functions :–

🔹 What is a String?
       A string is a sequence of characters enclosed in quotes:

🔸 Common String Functions:
       Function	Description	Example

              len()	           Returns length of string	                      len("hello") → 5
             .lower()	         Converts to lowercase                        	"Hello".lower() → "hello"
             .upper()	         Converts to uppercase                        	"hello".upper() → "HELLO"
             .capitalize()   	 Capitalizes first letter                      	"python".capitalize()
             .title()    	     Capitalizes first letter of each word 	        "hello world".title()
             .strip()	         Removes whitespace	                            " hello ".strip()
             .replace()	       Replaces substring                             "hi".replace("h","b") → "bi"
             .find()	         Finds position of substring                  	"hello".find("e") → 1
             .count()        	 Counts occurrences of a substring            	"apple".count("p") → 2
             .startswith()	   Checks if string starts with text            	"hello".startswith("he")
             .endswith()	     Checks if string ends with text              	"test".endswith("t")
             .split()	         Splits string into a list	                    "a,b,c".split(",") → ['a','b','c']
             .join()	         Joins elements of list into a string	          ",".join(['a','b']) → 'a,b'



🧠 Python Data Structures Notes :-

📌 1. Built-in Data Structures
✅ List
Ordered, mutable, allows duplicates.

python
Copy
Edit
my_list = [1, 2, 3, 4]
my_list.append(5)
my_list[0]  # Access first element
Key Methods:

append(), insert(), pop(), remove(), sort(), reverse(), extend()

✅ Tuple
Ordered, immutable, allows duplicates.

python
Copy
Edit
my_tuple = (1, 2, 3)
Use Case: Fixed collections of items (e.g., coordinates).

✅ Set
Unordered, mutable, no duplicates.

python
Copy
Edit
my_set = {1, 2, 3}
my_set.add(4)
my_set.remove(2)
Set Operations:

union(), intersection(), difference()

✅ Dictionary
Key-value pairs, unordered (as of Python <3.7), mutable.

python
Copy
Edit
my_dict = {"name": "Alice", "age": 25}
my_dict["name"]  # Access value
my_dict["age"] = 26
Key Methods:

keys(), values(), items(), get(), update(), pop()

📌 2. String (Technically a Data Structure)
Immutable, sequence of characters.

python
Copy
Edit
s = "hello"
s[0]  # 'h'
Key Methods:

lower(), upper(), split(), replace(), strip()

🧱 3. User-defined Data Structures
✅ Stack (LIFO)
python
Copy
Edit
stack = []
stack.append(10)
stack.pop()
✅ Queue (FIFO)
python
Copy
Edit
from collections import deque
queue = deque([1, 2, 3])
queue.append(4)
queue.popleft()
✅ Linked List (Using Classes)
python
Copy
Edit
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
✅ Tree (Binary Tree Example)
python
Copy
Edit
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None
✅ Graph (Using Dictionary)
python
Copy
Edit
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D'],
    'C': ['A'],
    'D': ['B']
}
⚙️ 4. Modules for Advanced Data Structures
collections — deque, Counter, defaultdict, OrderedDict

heapq — Min-heaps

queue — Thread-safe queues

array — Efficient arrays of numeric values

📚 Useful Tips
Use list when order and mutability are needed.

Use tuple when immutability is required.

Use set to remove duplicates or perform set operations.

Use dict for fast key-value lookups.

Use collections and custom classes for more complex data structures like graphs, trees, and linked lists.

Would you like this in PDF/Doc format, or should I generate flashcards, mind maps, or a summary sheet for revision?



*python-typecasting:- 
                  - Type casting in python refers to the process of converting the data type of a variable frpm one type to another ,such as from a string to integr, a float to an integer
etc.

EX- int(): convert avalue to integer.
    float():convert a value to a floating-point.
    str():convert a value to a string.
    list(),tuple(),set(),dict(),and bool()

IMPLICIT TYPE CASTING:-
   Also know as corecion ,is performed automatically by the python interpreter.this usually occurs when performing operation between different data types,and python implicity convert one data type to another to avoid data loss errors.
EX-
  num_int = 10
  num_float = 5.5
  result = num_int + num_float
  print(result)
  print(type(result))

#output: 15.5
#output:<class 'float'>

#Converting string to integer:
srt_num = 26
int_num = int(str_num)
print(int_num)
print(type(int_num))

#output: 26
#output: <class 'int'>

#Converting a value to boolean:
bool(0) #output: False
boolen(1) #output: True

* Range function in python:-
🧠 Python range() Function Notes
✅ What is range()?
The range() function returns a sequence of numbers, commonly used in for-loops to iterate a specific number of times.

📌 Syntax
python
Copy
Edit
range(start, stop, step)
start (optional): Starting number (default is 0)

stop: Ending number (exclusive)

step (optional): Difference between each number (default is 1)

🔢 Examples
1. Basic usage
python
Copy
Edit
for i in range(5):
    print(i)
# Output: 0 1 2 3 4
2. Specify start and stop
python
Copy
Edit
for i in range(2, 6):
    print(i)
# Output: 2 3 4 5
3. Specify step
python
Copy
Edit
for i in range(1, 10, 2):
    print(i)
# Output: 1 3 5 7 9
4. Negative step (counting down)
python
Copy
Edit
for i in range(5, 0, -1):
    print(i)
# Output: 5 4 3 2 1
📌 Convert to List
python
Copy
Edit
list(range(5))         # [0, 1, 2, 3, 4]
list(range(2, 10, 2))  # [2, 4, 6, 8]
⚠️ Important Notes
range() is memory-efficient (returns a range object, not a full list).

To use the numbers outside a loop or to manipulate them, convert to a list with list().

step cannot be 0, or you'll get a ValueError.

🔍 Use Cases
Iterating in loops

Generating number sequences

Index-based operations on lists

Repeating operations N times

Would you like:

A visual infographic on this?

A PDF printable version?

A quiz to test your understanding?


* Bitwise operator in python:-
🧠 Bitwise Operators in Python
Bitwise operators operate on binary representations of integers.

📌 List of Bitwise Operators
Operator	Name	Description	Example (a = 10, b = 4)
&	AND	Sets each bit to 1 if both bits are 1	a & b → 0b1010 & 0b0100 = 0b0000 → 0
`	`	OR	Sets each bit to 1 if one of the bits is 1
^	XOR	Sets each bit to 1 if only one of the bits is 1	a ^ b → 0b1010 ^ 0b0100 = 0b1110 → 14
~	NOT (Complement)	Inverts all bits (1's complement)	~a → -11 (in 2's complement form)
<<	Left Shift	Shifts bits left by N places (adds 0s at right)	a << 1 → 0b10100 → 20
>>	Right Shift	Shifts bits right by N places	a >> 1 → 0b0101 → 5

🔢 Example with Binary
python
Copy
Edit
a = 10    # binary: 1010
b = 4     # binary: 0100

print(a & b)  # 0
print(a | b)  # 14
print(a ^ b)  # 14
print(~a)     # -11 (inverts bits of 10)
print(a << 1) # 20 (shift left)
print(a >> 1) # 5  (shift right)
🧮 Binary Conversion
You can view binary form using bin():

python
Copy
Edit
print(bin(10))  # '0b1010'
print(bin(4))   # '0b100'
📌 Use Cases
Low-level programming (device drivers, networking)

Performance optimization

Cryptography

Compression algorithms

Graphics manipulation

Would you like a bitwise operator cheat sheet as a PDF or a practice quiz to reinforce this?









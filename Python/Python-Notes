Introduction of Python:

  - Python is a high level and easy to learn programing language that is widely used in data science.
  - python have easy to write and read syntax.
  - Python have large no of libraries strong communication supports.

* Why Python for data science :
  - In data science Python is used to collect, clean, analyze, visulaize data and it help to predict data.
  - Python used to some some libraries like.
  1. Pandas
  2. Numpy
  3. Matplotib
  4. Scikit-learn
 
vaiables and Data type :

* variables
  
  - Data /type can be stored in temporary storage space caleed variables.
  Ex :-

        Student = " Adnan "
        print(student)
 output :-
        Adnan

* Data types :-
  - Every variable is associated with a data type.

  1. int        - 10 , 20
  2. float      - 3.14 , 2.4
  3. Boolean    - true , False 
  4. String     - " srtmun "
  5. Complex    - 5+3j
                  5 = is real part
                  3 = is imaginary part


* Operators and string functions :-

1. Arithmetic Operators 

   Used for mathematical operations:
   Operator	Meaning	Example

   operator    Description       Example
      +	       Addition           a + b
      -   	   Subtraction       	a - b
      *    	   Multiplication    	a * b
      /    	   Division          	a / b


2. Relational operators :-

   Operators Used to compare two values:

  Operator   	Description        	Example

  ==         	Equal to          	a == b
  !=	        Not equal	          a != b
  >	          Greater than	      a > b
  <          	Less than        


3. Logical Operators :-

   Used to combine conditional statements:

 Operator	                  Description	                                  Example

 and	                      Returns True if both are true                	a > 5 and b < 10
 or                       	Returns True if at least one is true        	a > 5 or b < 3
 not	                      Reverses the result                         	not(a > 5)	a < b



* Python String Functions :–

🔹 What is a String?
       A string is a sequence of characters enclosed in quotes:

🔸 Common String Functions:
       Function	Description	Example

              len()	           Returns length of string	                      len("hello") → 5
             .lower()	         Converts to lowercase                        	"Hello".lower() → "hello"
             .upper()	         Converts to uppercase                        	"hello".upper() → "HELLO"
             .capitalize()   	 Capitalizes first letter                      	"python".capitalize()
             .title()    	     Capitalizes first letter of each word 	        "hello world".title()
             .strip()	         Removes whitespace	                            " hello ".strip()
             .replace()	       Replaces substring                             "hi".replace("h","b") → "bi"
             .find()	         Finds position of substring                  	"hello".find("e") → 1
             .count()        	 Counts occurrences of a substring            	"apple".count("p") → 2
             .startswith()	   Checks if string starts with text            	"hello".startswith("he")
             .endswith()	     Checks if string ends with text              	"test".endswith("t")
             .split()	         Splits string into a list	                    "a,b,c".split(",") → ['a','b','c']
             .join()	         Joins elements of list into a string	          ",".join(['a','b']) → 'a,b'



🧠 Python Data Structures Notes :-

📌 1. Built-in Data Structures
✅ List
Ordered, mutable, allows duplicates.

python
Copy
Edit
my_list = [1, 2, 3, 4]
my_list.append(5)
my_list[0]  # Access first element
Key Methods:

append(), insert(), pop(), remove(), sort(), reverse(), extend()

✅ Tuple
Ordered, immutable, allows duplicates.

python
Copy
Edit
my_tuple = (1, 2, 3)
Use Case: Fixed collections of items (e.g., coordinates).

✅ Set
Unordered, mutable, no duplicates.

python
Copy
Edit
my_set = {1, 2, 3}
my_set.add(4)
my_set.remove(2)
Set Operations:

union(), intersection(), difference()

✅ Dictionary
Key-value pairs, unordered (as of Python <3.7), mutable.

python
Copy
Edit
my_dict = {"name": "Alice", "age": 25}
my_dict["name"]  # Access value
my_dict["age"] = 26
Key Methods:

keys(), values(), items(), get(), update(), pop()

📌 2. String (Technically a Data Structure)
Immutable, sequence of characters.

python
Copy
Edit
s = "hello"
s[0]  # 'h'
Key Methods:

lower(), upper(), split(), replace(), strip()

🧱 3. User-defined Data Structures
✅ Stack (LIFO)
python
Copy
Edit
stack = []
stack.append(10)
stack.pop()
✅ Queue (FIFO)
python
Copy
Edit
from collections import deque
queue = deque([1, 2, 3])
queue.append(4)
queue.popleft()
✅ Linked List (Using Classes)
python
Copy
Edit
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
✅ Tree (Binary Tree Example)
python
Copy
Edit
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None
✅ Graph (Using Dictionary)
python
Copy
Edit
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D'],
    'C': ['A'],
    'D': ['B']
}
⚙️ 4. Modules for Advanced Data Structures
collections — deque, Counter, defaultdict, OrderedDict

heapq — Min-heaps

queue — Thread-safe queues

array — Efficient arrays of numeric values

📚 Useful Tips
Use list when order and mutability are needed.

Use tuple when immutability is required.

Use set to remove duplicates or perform set operations.

Use dict for fast key-value lookups.

Use collections and custom classes for more complex data structures like graphs, trees, and linked lists.

Would you like this in PDF/Doc format, or should I generate flashcards, mind maps, or a summary sheet for revision?
 


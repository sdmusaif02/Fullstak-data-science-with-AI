Introduction of Python:

  - Python is a high level and easy to learn programing language that is widely used in data science.
  - python have easy to write and read syntax.
  - Python have large no of libraries strong communication supports.

* Why Python for data science :
  - In data science Python is used to collect, clean, analyze, visulaize data and it help to predict data.
  - Python used to some some libraries like.
  1. Pandas
  2. Numpy
  3. Matplotib
  4. Scikit-learn
 
vaiables and Data type :

* variables
  
  - Data /type can be stored in temporary storage space caleed variables.
  Ex :-

        Student = " Adnan "
        print(student)
 output :-
        Adnan

* Data types :-
  - Every variable is associated with a data type.

  1. int        - 10 , 20
  2. float      - 3.14 , 2.4
  3. Boolean    - true , False 
  4. String     - " srtmun "
  5. Complex    - 5+3j
                  5 = is real part
                  3 = is imaginary part


* Operators and string functions :-

1. Arithmetic Operators 

   Used for mathematical operations:
   Operator	Meaning	Example

   operator    Description       Example
      +	       Addition           a + b
      -   	   Subtraction       	a - b
      *    	   Multiplication    	a * b
      /    	   Division          	a / b


2. Relational operators :-

   Operators Used to compare two values:

  Operator   	Description        	Example

  ==         	Equal to          	a == b
  !=	        Not equal	          a != b
  >	          Greater than	      a > b
  <          	Less than        


3. Logical Operators :-

   Used to combine conditional statements:

 Operator	                  Description	                                  Example

 and	                      Returns True if both are true                	a > 5 and b < 10
 or                       	Returns True if at least one is true        	a > 5 or b < 3
 not	                      Reverses the result                         	not(a > 5)	a < b



* Python String Functions :–

🔹 What is a String?
       A string is a sequence of characters enclosed in quotes:

🔸 Common String Functions:
       Function	Description	Example

              len()	           Returns length of string	                      len("hello") → 5
             .lower()	         Converts to lowercase                        	"Hello".lower() → "hello"
             .upper()	         Converts to uppercase                        	"hello".upper() → "HELLO"
             .capitalize()   	 Capitalizes first letter                      	"python".capitalize()
             .title()    	     Capitalizes first letter of each word 	        "hello world".title()
             .strip()	         Removes whitespace	                            " hello ".strip()
             .replace()	       Replaces substring                             "hi".replace("h","b") → "bi"
             .find()	         Finds position of substring                  	"hello".find("e") → 1
             .count()        	 Counts occurrences of a substring            	"apple".count("p") → 2
             .startswith()	   Checks if string starts with text            	"hello".startswith("he")
             .endswith()	     Checks if string ends with text              	"test".endswith("t")
             .split()	         Splits string into a list	                    "a,b,c".split(",") → ['a','b','c']
             .join()	         Joins elements of list into a string	          ",".join(['a','b']) → 'a,b'



🧠 Python Data Structures Notes :-

📌 1. Built-in Data Structures
✅ List
Ordered, mutable, allows duplicates.

python
Copy
Edit
my_list = [1, 2, 3, 4]
my_list.append(5)
my_list[0]  # Access first element
Key Methods:

append(), insert(), pop(), remove(), sort(), reverse(), extend()

✅ Tuple
Ordered, immutable, allows duplicates.

python
Copy
Edit
my_tuple = (1, 2, 3)
Use Case: Fixed collections of items (e.g., coordinates).

✅ Set
Unordered, mutable, no duplicates.

python
Copy
Edit
my_set = {1, 2, 3}
my_set.add(4)
my_set.remove(2)
Set Operations:

union(), intersection(), difference()

✅ Dictionary
Key-value pairs, unordered (as of Python <3.7), mutable.

python
Copy
Edit
my_dict = {"name": "Alice", "age": 25}
my_dict["name"]  # Access value
my_dict["age"] = 26
Key Methods:

keys(), values(), items(), get(), update(), pop()

📌 2. String (Technically a Data Structure)
Immutable, sequence of characters.

python
Copy
Edit
s = "hello"
s[0]  # 'h'
Key Methods:

lower(), upper(), split(), replace(), strip()

🧱 3. User-defined Data Structures
✅ Stack (LIFO)
python
Copy
Edit
stack = []
stack.append(10)
stack.pop()
✅ Queue (FIFO)
python
Copy
Edit
from collections import deque
queue = deque([1, 2, 3])
queue.append(4)
queue.popleft()
✅ Linked List (Using Classes)
python
Copy
Edit
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
✅ Tree (Binary Tree Example)
python
Copy
Edit
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None
✅ Graph (Using Dictionary)
python
Copy
Edit
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D'],
    'C': ['A'],
    'D': ['B']
}
⚙️ 4. Modules for Advanced Data Structures
collections — deque, Counter, defaultdict, OrderedDict

heapq — Min-heaps

queue — Thread-safe queues

array — Efficient arrays of numeric values

📚 Useful Tips
Use list when order and mutability are needed.

Use tuple when immutability is required.

Use set to remove duplicates or perform set operations.

Use dict for fast key-value lookups.

Use collections and custom classes for more complex data structures like graphs, trees, and linked lists.

Would you like this in PDF/Doc format, or should I generate flashcards, mind maps, or a summary sheet for revision?



*python-typecasting:- 
                  - Type casting in python refers to the process of converting the data type of a variable frpm one type to another ,such as from a string to integr, a float to an integer
etc.

EX- int(): convert avalue to integer.
    float():convert a value to a floating-point.
    str():convert a value to a string.
    list(),tuple(),set(),dict(),and bool()

IMPLICIT TYPE CASTING:-
   Also know as corecion ,is performed automatically by the python interpreter.this usually occurs when performing operation between different data types,and python implicity convert one data type to another to avoid data loss errors.
EX-
  num_int = 10
  num_float = 5.5
  result = num_int + num_float
  print(result)
  print(type(result))

#output: 15.5
#output:<class 'float'>

#Converting string to integer:
srt_num = 26
int_num = int(str_num)
print(int_num)
print(type(int_num))

#output: 26
#output: <class 'int'>

#Converting a value to boolean:
bool(0) #output: False
boolen(1) #output: True

* Range function in python:-
🧠 Python range() Function Notes
✅ What is range()?
The range() function returns a sequence of numbers, commonly used in for-loops to iterate a specific number of times.

📌 Syntax
python
Copy
Edit
range(start, stop, step)
start (optional): Starting number (default is 0)

stop: Ending number (exclusive)

step (optional): Difference between each number (default is 1)

🔢 Examples
1. Basic usage
python
Copy
Edit
for i in range(5):
    print(i)
# Output: 0 1 2 3 4
2. Specify start and stop
python
Copy
Edit
for i in range(2, 6):
    print(i)
# Output: 2 3 4 5
3. Specify step
python
Copy
Edit
for i in range(1, 10, 2):
    print(i)
# Output: 1 3 5 7 9
4. Negative step (counting down)
python
Copy
Edit
for i in range(5, 0, -1):
    print(i)
# Output: 5 4 3 2 1
📌 Convert to List
python
Copy
Edit
list(range(5))         # [0, 1, 2, 3, 4]
list(range(2, 10, 2))  # [2, 4, 6, 8]
⚠️ Important Notes
range() is memory-efficient (returns a range object, not a full list).

To use the numbers outside a loop or to manipulate them, convert to a list with list().

step cannot be 0, or you'll get a ValueError.

🔍 Use Cases
Iterating in loops

Generating number sequences

Index-based operations on lists

Repeating operations N times

Would you like:

A visual infographic on this?

A PDF printable version?

A quiz to test your understanding?


* Bitwise operator in python:-
🧠 Bitwise Operators in Python
Bitwise operators operate on binary representations of integers.

📌 List of Bitwise Operators
Operator	Name	Description	Example (a = 10, b = 4)
&	AND	Sets each bit to 1 if both bits are 1	a & b → 0b1010 & 0b0100 = 0b0000 → 0
`	`	OR	Sets each bit to 1 if one of the bits is 1
^	XOR	Sets each bit to 1 if only one of the bits is 1	a ^ b → 0b1010 ^ 0b0100 = 0b1110 → 14
~	NOT (Complement)	Inverts all bits (1's complement)	~a → -11 (in 2's complement form)
<<	Left Shift	Shifts bits left by N places (adds 0s at right)	a << 1 → 0b10100 → 20
>>	Right Shift	Shifts bits right by N places	a >> 1 → 0b0101 → 5

🔢 Example with Binary
python
Copy
Edit
a = 10    # binary: 1010
b = 4     # binary: 0100

print(a & b)  # 0
print(a | b)  # 14
print(a ^ b)  # 14
print(~a)     # -11 (inverts bits of 10)
print(a << 1) # 20 (shift left)
print(a >> 1) # 5  (shift right)
🧮 Binary Conversion
You can view binary form using bin():

python
Copy
Edit
print(bin(10))  # '0b1010'
print(bin(4))   # '0b100'
📌 Use Cases
Low-level programming (device drivers, networking)

Performance optimization

Cryptography

Compression algorithms

Graphics manipulation

Would you like a bitwise operator cheat sheet as a PDF or a practice quiz to reinforce this?

📘 Pandas Notes with All Essential Functions
🐼 1. Basics & Setup
python
Copy
Edit
import pandas as pd
Create DataFrame from dictionary:

python
Copy
Edit
data = {'Name': ['Alice', 'Bob'], 'Age': [25, 30]}
df = pd.DataFrame(data)
Read files:

python
Copy
Edit
pd.read_csv("file.csv")
pd.read_excel("file.xlsx")
pd.read_json("file.json")
Save files:

python
Copy
Edit
df.to_csv("file.csv", index=False)
df.to_excel("file.xlsx", index=False)
📊 2. Data Exploration
python
Copy
Edit
df.head()             # First 5 rows
df.tail()             # Last 5 rows
df.shape              # (rows, columns)
df.info()             # Data types + non-null count
df.describe()         # Summary stats for numeric columns
df.columns            # Column names
df.index              # Row indexes
df.dtypes             # Data types of each column
🔍 3. Data Selection
python
Copy
Edit
df['column']               # Select one column
df[['col1', 'col2']]       # Select multiple columns
df.iloc[0]                 # Row by position
df.loc[0]                  # Row by index label
df.iloc[0, 1]              # Specific cell
df.loc[0, 'column']        # Specific cell
🧹 4. Data Cleaning
python
Copy
Edit
df.isnull()                 # Check missing values
df.isnull().sum()           # Count missing values per column
df.dropna()                 # Remove rows with NaN
df.fillna(value)            # Replace NaN with value
df.duplicated()             # Check duplicates
df.drop_duplicates()        # Remove duplicates
df.replace(old, new)        # Replace values
df.rename(columns={'old':'new'}, inplace=True)
🔁 5. Data Transformation
python
Copy
Edit
df['new_col'] = df['col1'] + df['col2']       # Create new column
df['col'].astype(int)                         # Change data type
df.sort_values('col', ascending=True)         # Sort data
df.drop('col', axis=1)                        # Drop column
df.drop([0, 2], axis=0)                       # Drop rows
df.apply(func)                                # Apply function
🎯 6. Filtering Data
python
Copy
Edit
df[df['Age'] > 25]                           # Rows where Age > 25
df[(df['Age'] > 20) & (df['Salary'] > 30000)]
df.query("Age > 25 and Salary < 40000")
📚 7. GroupBy & Aggregation
python
Copy
Edit
df.groupby('Department').mean()
df.groupby('Department')['Salary'].sum()
df.groupby(['Dept', 'Gender']).agg({'Salary': 'mean', 'Age': 'max'})
🧮 8. Aggregations
python
Copy
Edit
df.sum()
df.mean()
df.median()
df.min()
df.max()
df.count()
df.nunique()
🔄 9. Merging & Joining
python
Copy
Edit
pd.concat([df1, df2])                      # Combine vertically
pd.merge(df1, df2, on='key')              # SQL-style join
pd.merge(df1, df2, how='left')            # left, right, inner, outer
📐 10. Pivot Tables
python
Copy
Edit
df.pivot_table(index='Gender', columns='Dept', values='Salary', aggfunc='mean')
🗃️ 11. Working with Dates
python
Copy
Edit
df['date'] = pd.to_datetime(df['date'])
df['year'] = df['date'].dt.year
df['month'] = df['date'].dt.month
df['day'] = df['date'].dt.day
df['weekday'] = df['date'].dt.day_name()
🔣 12. String Functions
python
Copy
Edit
df['col'].str.lower()
df['col'].str.upper()
df['col'].str.contains('abc')
df['col'].str.replace('old', 'new')
df['col'].str.strip()
📏 13. Reshaping Data
python
Copy
Edit
df.melt(id_vars=['id'], value_vars=['math', 'science'])   # Wide to long
df.pivot(index='id', columns='subject', values='score')   # Long to wide
🔄 14. Looping & Apply
python
Copy
Edit
df['Age Category'] = df['Age'].apply(lambda x: 'Young' if x < 30 else 'Old')
📤 15. Exporting Data
python
Copy
Edit
df.to_csv('output.csv', index=False)
df.to_excel('output.xlsx', index=False)
df.to_json('output.json')


📌 1. Importing Matplotlib
python
Copy
Edit
import matplotlib.pyplot as plt
📌 2. Line Plot
python
Copy
Edit
plt.plot(x, y, color='blue', marker='o', linestyle='--', linewidth=2)
plt.title("Title")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.grid(True)
plt.show()
Common line styles:

'-': solid

'--': dashed

':': dotted

'-.': dash-dot

Markers:

'o': circle

's': square

'^': triangle

'*': star

📌 3. Bar Chart
python
Copy
Edit
plt.bar(x, y, color='orange', width=0.4, edgecolor='black')
plt.title("Bar Chart")
plt.xlabel("Categories")
plt.ylabel("Values")
plt.show()
Horizontal Bar Chart:

python
Copy
Edit
plt.barh(x, y, color='skyblue')
📌 4. Pie Chart
python
Copy
Edit
plt.pie(values, labels=labels, autopct="%1.1f%%", startangle=90)
plt.axis('equal')  # Circle shape
plt.title("Pie Chart")
plt.show()
📌 5. Scatter Plot
python
Copy
Edit
plt.scatter(x, y, color='red', marker='x')
plt.title("Scatter Plot")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.grid()
plt.show()
📌 6. Histogram
python
Copy
Edit
plt.hist(data, bins=10, color='purple', edgecolor='black')
plt.title("Histogram")
plt.xlabel("Values")
plt.ylabel("Frequency")
plt.show()
📌 7. Box Plot
python
Copy
Edit
plt.boxplot(data)
plt.title("Box Plot")
plt.show()
📌 8. Subplots
python
Copy
Edit
plt.subplot(1, 2, 1)  # (rows, cols, index)
plt.plot(x, y)

plt.subplot(1, 2, 2)
plt.bar(x, y)

plt.tight_layout()
plt.show()
📌 9. Customize Plot
python
Copy
Edit
plt.legend(["Line A"], loc='best')
plt.xticks(rotation=45)
plt.yticks([0, 10, 20, 30])
📌 10. Save Plot
python
Copy
Edit
plt.savefig("plot.png", dpi=300)
✅ Extra Tips:
Use fig = plt.figure(figsize=(8, 5)) to resize.

Combine pandas and matplotlib for powerful plots.

python
Copy
Edit
df.plot(kind='bar')
plt.show()


📘 Seaborn Notes for Python
🔹 What is Seaborn?
Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.

Install Seaborn:

bash
Copy
Edit
pip install seaborn
Import Seaborn:

python
Copy
Edit
import seaborn as sns
import matplotlib.pyplot as plt
📊 Basic Functions
1. Load Sample Datasets
python
Copy
Edit
df = sns.load_dataset("tips")  # Built-in dataset
df.head()
2. Set Style
python
Copy
Edit
sns.set_style("darkgrid")  # Options: whitegrid, darkgrid, dark, white, ticks
📈 Plotting Functions
🔸 1. Distribution Plots
Histogram + KDE:

python
Copy
Edit
sns.histplot(df['total_bill'], kde=True)
KDE only:

python
Copy
Edit
sns.kdeplot(df['total_bill'])
🔸 2. Categorical Plots
Bar Plot:

python
Copy
Edit
sns.barplot(x='sex', y='total_bill', data=df)
Count Plot:

python
Copy
Edit
sns.countplot(x='day', data=df)
Box Plot:

python
Copy
Edit
sns.boxplot(x='day', y='total_bill', data=df)
Violin Plot:

python
Copy
Edit
sns.violinplot(x='day', y='total_bill', data=df)
Strip Plot:

python
Copy
Edit
sns.stripplot(x='day', y='total_bill', data=df, jitter=True)
Swarm Plot:

python
Copy
Edit
sns.swarmplot(x='day', y='total_bill', data=df)
🔸 3. Relational Plots
Scatter Plot:

python
Copy
Edit
sns.scatterplot(x='total_bill', y='tip', data=df)
Line Plot:

python
Copy
Edit
sns.lineplot(x='size', y='tip', data=df)
Relplot (Flexible for line/scatter):

python
Copy
Edit
sns.relplot(x='total_bill', y='tip', data=df, kind='scatter')
🔸 4. Matrix Plots
Heatmap:

python
Copy
Edit
corr = df.corr()
sns.heatmap(corr, annot=True, cmap='coolwarm')
Clustermap:

python
Copy
Edit
sns.clustermap(corr, annot=True)
🧩 Advanced Seaborn Usage
🔸 Hue, Style, Size
python
Copy
Edit
sns.scatterplot(x='total_bill', y='tip', hue='sex', style='time', size='size', data=df)
🔸 Pair Plot
python
Copy
Edit
sns.pairplot(df, hue='sex')
🔸 Joint Plot
python
Copy
Edit
sns.jointplot(x='total_bill', y='tip', data=df, kind='hex')
🎨 Customization Options
🔸 Titles & Labels
python
Copy
Edit
plt.title("Tip vs Total Bill")
plt.xlabel("Total Bill")
plt.ylabel("Tip")
🔸 Color Palettes
python
Copy
Edit
sns.set_palette("pastel")  # Options: deep, muted, bright, pastel, dark, colorblind
⚠️ Removing Warnings
python
Copy
Edit
import warnings
warnings.filterwarnings('ignore')
📌 Tips
Always import matplotlib.pyplot to use plt.show()

Use fig = plt.figure(figsize=(10,6)) to increase figure size

Use palette='Set2' or palette='coolwarm' for nice color themes

Use annot=True in heatmap to show values









